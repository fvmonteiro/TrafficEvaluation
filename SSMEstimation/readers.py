import os
# import numpy as np
import pandas as pd
# from sodapy import Socrata
from vissim_interface import VissimInterface


# from Vehicle import Vehicle


class DataReader:
    relevant_columns = {'time', 'veh_id', 'veh_type', 'link', 'lane',
                        'x', 'vx', 'y', 'leader_id', 'delta_x', 'leader_type',
                        'front_x', 'front_y', 'rear_x', 'rear_y', 'length'}

    def __init__(self, data_dir=None, base_file_name=None):
        self.data_dir = data_dir
        self.base_file_name = base_file_name
        self.file_name = self.base_file_name
        # Necessary to include in parent if they will always be irrelevant?
        # self.data_source = None

    def load_data(self):
        pass

    # def load_max_decel_data(self):
    #     pass

    def get_simulation_identifier(self):
        pass

    def select_relevant_columns(self, data):
        columns_to_drop = []
        for col in data.columns:
            if col not in self.relevant_columns:
                columns_to_drop.append(col)
        data.drop(columns=columns_to_drop, inplace=True)


class VissimDataReader(DataReader):
    """Reads raw data generated by VISSIM"""

    file_extension = '.fzp'
    vissim_dir = VissimInterface.networks_folder
    column_names_map = {'SIMSEC': 'time', 'NO': 'veh_id',
                        'VEHTYPE': 'veh_type', 'LANE\\LINK\\NO': 'link',
                        'LANE\\INDEX': 'lane', 'POS': 'x', 'SPEED': 'vx',
                        'POSLAT': 'y', 'LEADTARGNO': 'leader_id',
                        'FOLLOWDIST': 'delta_x', 'COORDFRONTX': 'front_x',
                        'COORDFRONTY': 'front_y', 'COORDREARX': 'rear_x',
                        'COORDREARY': 'rear_y'}

    # Note: we don't necessarily want all the variables mentioned above

    def __init__(self, network_name):
        # self.sim_number = 0
        if network_name in VissimInterface.existing_networks:
            network_name = VissimInterface.existing_networks[network_name]
        elif network_name in VissimInterface.existing_networks.values():
            pass
        else:
            raise ValueError('Network "{}" is not in the list of valid '
                             'simulations\nCheck whether the network exists  '
                             'and it to the VissimInterface attribute '
                             'existing_networks'.
                             format(network_name))

        DataReader.__init__(self, self.vissim_dir, network_name)
        self.data_source = 'VISSIM'

    def load_data(self, sim_number=1):
        """ Loads raw vehicle records from simulations of a chosen network
        :return: pandas dataframes
        """
        # Create a three-character string with trailing zeros and then
        # sim_nums (e.g.: 004, 015, 326)
        num_str = str(sim_number).rjust(3, '0')
        # self.sim_number = num_str
        self.file_name = self.base_file_name + '_' + num_str
        full_address = os.path.join(self.data_dir,
                                    self.file_name + self.file_extension)
        try:
            with open(full_address, 'r') as file:
                # Skip header lines
                for line in file:
                    if line.startswith('$VEHICLE'):
                        fzp_header = line.strip('$VEHICLE:\n').split(';')
                        break
                column_names = []
                for variable_name in fzp_header:
                    column_names.append(
                        self.column_names_map[variable_name])
                sim_output = pd.read_csv(file, sep=';',
                                         names=column_names,
                                         index_col=False)
        except OSError:
            raise ValueError('No VISSIM file with name {}{}'.
                             format(self.file_name, self.file_extension))

        self.select_relevant_columns(sim_output)
        return sim_output

    @staticmethod
    def load_max_decel_data():
        """ Loads data describing maximum deceleration distribution per vehicle
         type and velocity
        :return: pandas dataframe with double index
        """
        max_decel_data = pd.read_csv(os.path.join(VissimDataReader.vissim_dir,
                                                  'max_decel_data.csv'))
        kph_to_mps = 1 / 3.6
        max_decel_data['vel'] = max_decel_data['vel'] * kph_to_mps
        max_decel_data.set_index(['veh_type', 'vel'], inplace=True)
        return max_decel_data

    # def get_simulation_identifier(self):
    #     """Returns the time of the day of the data which was loaded last"""
    #     return self.sim_number

    def read_reduced_speed_area(self, sim_number):
        """ Loads value of maximum speed on reduced speed areas
        :return: pandas dataframes
        """

        file_extension = '.att'
        # Column names defined from checking the att file
        column_names = ['number', 'name', 'lane', 'position', 'length',
                        'time_from', 'time_to']
        [column_names.append('speed(' + str(i * 10) + ')') for i in range(1, 7)]
        [column_names.append('decel(' + str(i * 10) + ')') for i in range(1, 7)]

        # Create a three-character string with trailing zeros and then
        # sim_nums (e.g.: 004, 015, 326)
        num_str = str(sim_number).rjust(3, '0')
        self.sim_number = num_str
        file_name = (self.base_file_name + '_' + 'Reduced Speed Areas'
                     + '_' + self.sim_number)
        full_address = os.path.join(self.data_dir,
                                    file_name + file_extension)
        try:
            with open(full_address, 'r') as file:
                # Skip header lines
                for line in file:
                    if line.startswith('$REDUCEDSPEEDAREA'):
                        break
                sim_output = pd.read_csv(file, sep=';',
                                         names=column_names)
        except OSError:
            raise ValueError('No VISSIM file with name {}{}'.
                             format(file_name, file_extension))

        sim_output.dropna(axis='columns', how='all', inplace=True)
        return sim_output

    def read_all_reduced_speed_area_files(self, first_file_number=1):
        max_file_number = 999
        sim_output = []
        try:
            for i in range(first_file_number, max_file_number + 1):
                sim_output.append(self.read_reduced_speed_area(i))
        except ValueError:
            if i == first_file_number:
                raise ValueError('No reduced speed area file for simulation {}'.
                                 format(self.base_file_name))
            print(i - first_file_number, 'reduced-speed-area files read')
        return sim_output

    def read_link_segment_results(self, sim_number):
        """ Loads value of maximum speed on reduced speed areas
        :return: pandas dataframes
        """

        file_extension = '.att'
        # Column names defined from checking the att file
        column_names = ['sim_number', 'time_interval', 'link_segment',
                        'density', 'relative_delay', 'speed', 'volume']

        # Create a three-character string with trailing zeros and then
        # sim_nums (e.g.: 004, 015, 326)
        num_str = str(sim_number).rjust(3, '0')
        self.sim_number = num_str
        file_name = (self.base_file_name + '_' + 'Link Segment Results'
                     + '_' + self.sim_number)
        full_address = os.path.join(self.data_dir,
                                    file_name + file_extension)
        try:
            with open(full_address, 'r') as file:
                # Skip header lines
                for line in file:
                    if line.startswith('$LINKEVALSEGMENTEVALUATION'):
                        break
                sim_output = pd.read_csv(file, sep=';',
                                         names=column_names)
        except OSError:
            raise ValueError('No VISSIM file with name {}{}'.
                             format(file_name, file_extension))

        sim_output.dropna(axis='columns', how='all', inplace=True)
        return sim_output


class NGSIMDataReader(DataReader):
    """Reads raw vehicle trajectory data from NGSIM scenarios on the US-101"""

    file_extension = '.csv'
    ngsim_dir = ('C:\\Users\\fvall\\Documents\\Research\\TrafficSimulation'
                 '\\NGSIM_original\\')
    location_switch = {'us-101': 'US-101-LosAngeles-CA\\us-101-vehicle'
                                 '-trajectory-data'}
    interval_switch = {1: '0750am-0805am', 2: '0805am-0820am',
                       3: '0820am-0835am'}
    ngsim_to_reader_naming = {'Global_Time': 'time', 'Vehicle_ID': 'veh_id',
                              'v_Class': 'veh_type', 'Local_Y': 'x',
                              'v_Vel': 'vx', 'Local_X': 'y',
                              'Preceding': 'leader_id', 'Lane_ID': 'lane',
                              'Space_Hdwy': 'delta_x', 'v_Length': 'length'}

    def __init__(self, location):
        # self.interval = 0
        try:
            data_dir = os.path.join(self.ngsim_dir,
                                    self.location_switch[location])
            file_name = 'trajectories-'
        except KeyError:
            print('{}: KeyError: location {} not defined'.
                  format(self.__class__.__name__, location))
            data_dir = None
            file_name = None
        DataReader.__init__(self, data_dir, file_name)
        self.data_source = 'NGSIM'

    def load_data(self, interval=1):

        if interval not in self.interval_switch:
            print('Requested interval not available')
            return pd.DataFrame()

        # self.interval = interval
        self.file_name = self.base_file_name + self.interval_switch[interval]
        full_address = os.path.join(self.data_dir,
                                    self.file_name + self.file_extension)
        try:
            with open(full_address, 'r') as file:
                data = pd.read_csv(file)
                data.rename(columns=self.ngsim_to_reader_naming, inplace=True)
        except OSError:
            raise ValueError('No NGSIM file with name {}'.
                             format(self.file_name))

        self.select_relevant_columns(data)
        return data

    # def get_simulation_identifier(self):
    #     """Returns the time of the day of the data which was loaded last"""
    #     return self.interval_switch[self.interval]


class PostProcessedDataReader(DataReader):
    file_extension = '.csv'
    post_processed_dir = ('C:\\Users\\fvall\\Documents\\Research'
                          '\\TrafficSimulation\\post_processed_data')

    # file_source_dict = {'highway_in_and_out_lanes': 'VISSIM',
    #                     'I710-MultiSec-3mi': 'VISSIM',
    #                     # 'US_101': 'VISSIM',
    #                     'us-101': 'NGSIM',
    #                     'synthetic_data': 'synthetic_data'}

    def __init__(self, data_source, file_name):
        # if file_name not in self.file_source_dict:
        #     raise ValueError('No post-processed file with name {}'.
        #                      format(file_name))
        self.data_source = data_source
        if (data_source.lower() == 'vissim'
                and file_name in VissimInterface.existing_networks):
            file_name = VissimInterface.existing_networks[file_name]
        if data_source.lower() == 'ngsim':
            file_name = 'trajectories-'

        data_dir = os.path.join(self.post_processed_dir, self.data_source)
        DataReader.__init__(self, data_dir, file_name)

    def load_data(self, simulation_identifier=1):
        """ Loads post processed vehicle data from VISSIM or NGSIM
        :return: pandas dataframe
        """
        if self.data_source.lower() == 'vissim':
            simulation_identifier = str(simulation_identifier).rjust(3, '0')
            self.file_name += '_' + simulation_identifier
        elif self.data_source.lower() == 'ngsim':
            simulation_identifier = (NGSIMDataReader.
                                     interval_switch[simulation_identifier])
            self.file_name += simulation_identifier
        elif self.data_source.lower() == 'synthetic_data':
            pass  # self.file_name is already the correct file name
        else:
            raise ValueError('Unknown data source: ', self.data_source)

        full_address = os.path.join(self.data_dir,
                                    self.file_name + self.file_extension)
        return pd.read_csv(full_address)


class OnLineDataReader(DataReader):
    """"Class to read NGSIM data online, commands from
    https://dev.socrata.com/foundry/data.transportation.gov/8ect-6jqj
    Data details in:
    https://data.transportation.gov/Automobiles/Next-Generation-Simulation-
    NGSIM-Vehicle-Trajector/8ect-6jqj"""

    def __init__(self):
        url = "data.transportation.gov"
        database_identifier = "8ect-6jqj"
        DataReader.__init__(self, url, database_identifier)
        self.data_source = 'NGSIM_online'

    # def load_data(self, location='us-101', limit='2000'):
    #     """
    #     :param location: peachtree, i-80, us-101, lankershim
    #     :param limit: max number of rows
    #     :return: pandas dataframe
    #     """
    #     # The get function can receive SQL-like parameters to better select
    #     # the data
    #
    #     # Unauthenticated client only works with public data sets. Note
    #     # 'None' in place of application token, and no username or password:
    #     client = Socrata(self.data_dir, None)
    #     # Results, returned as JSON from API / converted to Python list of
    #     # dictionaries by sodapy.
    #     results = client.get(self.file_name, location=location, limit=limit)
    #     # Convert to pandas DataFrame
    #     results_df = pd.DataFrame.from_records(results)
    #
    #     return results_df


class SyntheticDataReader(DataReader):
    file_extension = '.csv'
    synthetic_dir = ('C:\\Users\\fvall\\Documents\\Research\\TrafficSimulation'
                     '\\synthetic_data\\')
    synthetic_sim_name = 'synthetic_data'

    def __init__(self):
        self.sim_number = 0
        self.column_names = ['time', 'veh_id', 'veh_type', 'link', 'lane', 'x',
                             'vx', 'y', 'leader_id', 'delta_x']
        DataReader.__init__(self, self.synthetic_dir, self.synthetic_sim_name)
        self.data_source = 'synthetic'

    def load_data(self):
        self.file_name = self.base_file_name
        full_address = os.path.join(self.data_dir,
                                    self.file_name + self.file_extension)
        with open(full_address, 'r') as file:
            data = pd.read_csv(file)
        self.select_relevant_columns(data)
        return data
